pipeline {
    agent any

    environment {
        REMOTE_HOST     = 'ubuntu@44.203.130.222'
        SSH_CREDENTIALS = 'keninstance'
        BASE_URL        = "http://44.203.130.222"
        DOCKER_CREDENTIALS = credentials('dockerken')
    }
    
    stages {
        stage('copy repository') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/RomeyKung/kro-store.git']])

            }  
        }
        stage('Build Image and Push to Docker Hub') {
            steps {
                script {
                    sh 'echo $DOCKER_CREDENTIALS_PSW | docker login --username $DOCKER_CREDENTIALS_USR --password-stdin'
                    sh 'docker build -t kenmurakii/kro-nginx:latest ./nginx'
                    sh 'docker build -t kenmurakii/kro-nuxt:latest .'
                    sh 'docker build -t kenmurakii/kro-golang:latest ./kro-backend'
                    sh 'docker-compose push'
                }
            }
        }
        stage('Clear Environment') {
            steps {
                sshagent([SSH_CREDENTIALS]) {
                    sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'rm -rf kro-store'"
                    sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'docker stop \$(docker ps -a -q) || true'"
                    sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'docker rm \$(docker ps -a -q) || true'"
                    sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'docker rmi \$(docker images -q) || true'"
                }
            }
        }
        stage('Docker Pull') {
            steps {
                sshagent([SSH_CREDENTIALS]) {
                    sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'docker-compose pull'"
                }
            }
        }
        stage('Build on Remote Server') {
            steps {
                sshagent([SSH_CREDENTIALS]) {
                    sh "ssh -o StrictHostKeyChecking=no $REMOTE_HOST 'docker-compose up -d'"

                }
            }
        }
    }
}

